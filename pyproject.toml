[project]
name = "finddata"
description = "A program to find data files using ONCat"
dynamic = ["version"]
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = ["neutrons", "finddata", "ONCat"]
readme = "README.md"
dependencies = ["urllib3", "toml", "plotly"]

[conda-pypi-map]
"conda-forge" = """
{
  "pyqt": "PyQt5",
}
"""

[project.urls]
homepage = "https://github.com/neutrons/finddata/"
repository = "https://github.com/neutrons/finddata/"
documentation = "https://github.com/neutrons/finddata/"
issues = "https://github.com/neutrons/finddata/issues"

[build-system]
requires = ["setuptools >= 42", "wheel", "toml", "versioningit"]
build-backend = "setuptools.build_meta"

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}+d{build_date:%Y%m%d}"
distance-dirty = "{next_version}.dev{distance}+d{build_date:%Y%m%d}"

[tool.versioningit.write]
file = "src/finddata/_version.py"

[tool.versioningit.onbuild]
source-file = "src/finddata/_version.py"
build-file = "finddata/_version.py"
replacement = "{next_version}"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*", "scripts*", "docs*", "notebooks*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.ini"]

[project.scripts]
finddata = "finddata.cli:main"

[tool.pytest.ini_options]
addopts = "-v --cov=finddata --cov-report=term-missing"
pythonpath = [".", "src", "scripts", "finddata"]
testpaths = ["tests"]
python_files = ["test*.py"]
norecursedirs = [
  ".git",
  "tmp*",
  "_tmp*",
  "__pycache__",
  "*dataset*",
  "*data_set*",
]
markers = ["mymarker: example markers goes here"]

# ------------------ #
# Ruff configuration #
# ------------------ #
[tool.ruff]
target-version = "py311"
line-length = 120
select = ["A", "ARG", "ASYNC", "BLE", "C90", "E", "F", "I", "N", "UP032", "W"]
exclude = ["notebooks/**", "**/*.ipynb", "conftest.py"]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["F403", "F405"]

[tool.ruff.lint.isort]
known-first-party = ["finddata"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# ------------------ #
# Pixi configuration #
# ------------------ #
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
finddata = { path = ".", editable = true }

[tool.pixi.dependencies]
urllib3 = "*"

[tool.pixi.tasks]
# PyPI
build-pypi = { cmd = "python -m build", description = "Build the package for PyPI" }
clean-pypi = { cmd = "rm -rf dist", description = "Clean the PyPI build artifacts" }
publish-pypi = { cmd = "twine upload dist/*", description = "Publish the package to PyPI", depends-on = [
  "build-pypi",
] }
# Conda
# Docs
# build-docs = { cmd = "sphinx-build -b html docs docs/_build", description = "Build the documentation" }
# clean-docs = { cmd = "rm -rf docs/_build", description = "Clean the documentation build artifacts" }
# Test
test = { cmd = "pytest", description = "Run the tests" }
# MISC
clean-all = { description = "Clean all build artifacts", depends-on = [
  "clean-pypi",
] }

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.package.dependencies]
boa = "*"
anaconda-client = ">=1.13.0,<2"
conda-build = "*"
conda-verify = "*"
python-build = "*"
check-wheel-contents = "*"
rattler-build = "*"
twine = ">=6.1.0,<7"
versioningit = "*"

[tool.pixi.feature.developer.dependencies]
pip = "*"
versioningit = "*"
pre-commit = "*"
conda-tree = "*"
ruff = "*"

[tool.pixi.feature.docs.dependencies]
sphinx = ">=8.2.1,<9"
sphinx_rtd_theme = ">=3.0.1,<4"

[tool.pixi.environments]
default = { features = [
  "test",
  "package",
  "developer",
  "docs",
], solve-group = "default" }
